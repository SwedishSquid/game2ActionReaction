//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Standart"",
            ""id"": ""a875e821-bdab-417a-9c65-8f78ed478481"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""73b98b70-4fb5-4a5c-a2b8-268ebf904ab0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeaveApp"",
                    ""type"": ""Button"",
                    ""id"": ""c4dea4b2-9260-4a77-9de4-098e95bf3b82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e16b2880-e3d8-4588-869a-b073a37c408e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""710e72d1-f22a-4d2f-93c2-d20b1e030fa2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04af3622-826f-4b51-ac00-1f007ea9de27"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""131917ee-2877-4d1b-852c-da51ad53000f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""40042ff7-05cd-46a6-ba18-96c96de53018"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e72e5930-5986-4684-8e4d-dc8c26df47c4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeaveApp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Standart
        m_Standart = asset.FindActionMap("Standart", throwIfNotFound: true);
        m_Standart_Move = m_Standart.FindAction("Move", throwIfNotFound: true);
        m_Standart_LeaveApp = m_Standart.FindAction("LeaveApp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Standart
    private readonly InputActionMap m_Standart;
    private List<IStandartActions> m_StandartActionsCallbackInterfaces = new List<IStandartActions>();
    private readonly InputAction m_Standart_Move;
    private readonly InputAction m_Standart_LeaveApp;
    public struct StandartActions
    {
        private @PlayerInput m_Wrapper;
        public StandartActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Standart_Move;
        public InputAction @LeaveApp => m_Wrapper.m_Standart_LeaveApp;
        public InputActionMap Get() { return m_Wrapper.m_Standart; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StandartActions set) { return set.Get(); }
        public void AddCallbacks(IStandartActions instance)
        {
            if (instance == null || m_Wrapper.m_StandartActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StandartActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @LeaveApp.started += instance.OnLeaveApp;
            @LeaveApp.performed += instance.OnLeaveApp;
            @LeaveApp.canceled += instance.OnLeaveApp;
        }

        private void UnregisterCallbacks(IStandartActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @LeaveApp.started -= instance.OnLeaveApp;
            @LeaveApp.performed -= instance.OnLeaveApp;
            @LeaveApp.canceled -= instance.OnLeaveApp;
        }

        public void RemoveCallbacks(IStandartActions instance)
        {
            if (m_Wrapper.m_StandartActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStandartActions instance)
        {
            foreach (var item in m_Wrapper.m_StandartActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StandartActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StandartActions @Standart => new StandartActions(this);
    public interface IStandartActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLeaveApp(InputAction.CallbackContext context);
    }
}
